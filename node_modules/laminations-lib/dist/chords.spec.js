"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chords_1 = require("./chords");
const fractions_1 = require("./fractions");
describe('Chords', () => {
    const binary = fractions_1.Fractions.parseFactory(2);
    const zero = binary("_");
    const oneSeventh = binary("_001");
    const threeFourteenths = binary("0_011");
    const twoSevenths = binary("_010");
    const oneHalf = binary("1_");
    const elevenFourteenths = binary("1_100");
    const sixSevenths = binary("_110");
    const zero_twoSevenths = chords_1.Chords.create(zero, twoSevenths);
    const zero_oneHalf = chords_1.Chords.create(zero, oneHalf);
    const oneSeventh_twoSevenths = chords_1.Chords.create(oneSeventh, twoSevenths);
    const threeFourteenths_oneHalf = chords_1.Chords.create(threeFourteenths, oneHalf);
    const twoSevenths_elevenFourteenths = chords_1.Chords.create(twoSevenths, elevenFourteenths);
    const twoSevenths_sixSevenths = chords_1.Chords.create(twoSevenths, sixSevenths);
    it('determines whether a point is on the boundary of a Chords', () => {
        const onBoundary = chords_1.Chords.onBoundary;
        const chord = chords_1.Chords.create(oneSeventh, twoSevenths);
        expect(onBoundary(chord, threeFourteenths)).toBe(false);
        expect(onBoundary(chord, oneSeventh)).toBe(true);
        expect(onBoundary(chord, twoSevenths)).toBe(true);
    });
    it('determines intersection of Chordss', () => {
        const intersects = chords_1.Chords.intersects;
        expect(intersects(zero_twoSevenths, oneSeventh_twoSevenths))
            .toBe(false);
        expect(intersects(zero_twoSevenths, threeFourteenths_oneHalf))
            .toBe(true);
        expect(intersects(oneSeventh_twoSevenths, threeFourteenths_oneHalf))
            .toBe(true);
        expect(intersects(threeFourteenths_oneHalf, twoSevenths_sixSevenths))
            .toBe(true);
        expect(intersects(zero_oneHalf, zero_twoSevenths))
            .toBe(false);
        expect(intersects(zero_oneHalf, zero_oneHalf))
            .toBe(false);
    });
    it('checks whether a point is contained', () => {
        const contains = chords_1.Chords.contains;
        expect(contains(zero_oneHalf, twoSevenths)).toBe(true);
        expect(contains(twoSevenths_sixSevenths, oneHalf)).toBe(false);
        expect(contains(twoSevenths_sixSevenths, zero)).toBe(true);
    });
    it('identifies diameters', () => {
        const isDiameter = chords_1.Chords.isDiameter;
        expect(isDiameter(zero_oneHalf)).toBe(true);
        expect(isDiameter(twoSevenths_elevenFourteenths)).toBe(true);
        expect(isDiameter(twoSevenths_sixSevenths)).toBe(false);
    });
});
//# sourceMappingURL=chords.spec.js.map